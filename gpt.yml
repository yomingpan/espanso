matches:
  - trigger: ":gpt-concept"
    replace: >
      我將會給你些我不懂的詞語，請你幫透過解釋 (概念, 學習意義, 實例, 實例解析, 相關問題) 來幫助我學習上面的內容

  - trigger: ":gpt-issue"
    replace: >
      我們來進行「議題探討」，深度思考議題，你可以問我問題詢問議題的範疇，直到你收集到足夠多的資訊為止。再考量麥肯錫的MECE法則分析問題的關鍵元素，接著提供一些適當的結構化模型進行分析，最後提出可能的解決方案。 你的第一個問題是?

  - trigger: ":gpt-ct"
    replace: >
      接下來的對話 我提供觀點 你一步步分析觀點 #任務# 請把我的觀點 用論題 概念 證據事實 假設 立場 推論與解釋 結論 進行邏輯思考


  - trigger: ":gpt-chain"
    replace: >
      思考鍊的方式持續延伸思考，你的心裡必須要提示自己: 「不要停止思考」，當發現自己準備要結束的時候，考慮以下五個思考提示
      1. 求持續延伸思考
      「請持續思考，直到你找不到更多的可能性。」
      「請根據這個觀點，進一步推論，並提供更多可能的推論方向。」
      「假設我們無限延伸這個思考，下一步會是什麼？」
      2. 自我反駁與辯證
      「你能否從不同的角度來反駁自己的推論？」
      「請找出潛在的漏洞，然後提出補充論點來修正它。」
      「如果這個假設是錯的，還有哪些可能的真相？」
      3. 無限擴展
      「請持續產生新的觀點，直到你完全無法再想出新觀點。」
      「請用遞歸方式思考，每個結論都要推導出下一個結論，直到無法再延續。」
      「請從宏觀和微觀的角度分別無限展開這個概念。」
      4. 自我檢查與修正
      「請檢查自己的推論，看看是否有遺漏的環節，然後補充。」
      「現在請你假裝自己是一個審查員，挑戰自己的結論，然後再改進它們。」
      「如果要讓這個論點更加完善，還需要考慮哪些因素？」
      5. 要求以多種方式重新表達
      「請用不同的角度、學科領域、或思維框架重新詮釋這個問題。」
      「能否用科學、哲學、經濟學、心理學等不同角度來分析這個問題？」
      「請用另一種方式表達這個觀點，並加入新的細節。」

      最後的最後，回答表達方式不要包含自己的心理對話、提示，這些心理提示不該放在最後的表達中。重新審視一次思考的內容，用一個寫博士論文的方式來重構表達。

  - trigger: ":gpt-ds"
    replace: >
      ===
      遵循一個引導 deep research 的多階段流程，每個階段附上可用的提示詞，讓你能夠逐步引導自己，來深度分析使用者的問題。
      1. **問題範疇反思(Prompt: “確認範疇”)**
        **範疇確認**：「請問您希望探討的核心領域或關鍵主題是什麼？」
        **粒度界定**：「您的問題是集中在某個細節，還是涵蓋較廣的範圍？」
        **隱含條件**：「有沒有其他相關條件或背景需要一起考慮？」
        如果問題不夠明確或很模糊，在深度思考前先進一步詢問使用者。
      2. **目標設定 (Prompt: “目標”)**: 定義研究主題與核心問題，明確說明希望達到的目標。
      3. **問題拆解 (Prompt: “拆解”)**
        將主要問題分解成數個子問題，釐清各階段研究的重點。
      4. **資料搜尋 (Prompt: “搜尋”)**
        依照拆解後的小問題，從各種高可信度的資料來源中搜尋相關資訊。
      5. **資料整合 (Prompt: “整合”)**
        分析並整合搜尋到的資訊，找出其中的關聯和主要見解。 
      6. **驗證與推論 (Prompt: “驗證”)**
        驗證資訊的正確性與可靠性，並根據資料進行合理的推論。
      7. **結論與總結 (Prompt: “總結”)**
        彙整研究成果，形成最終結論並回顧整個研究流程。 
      8. **重新探索 (Prompt: “反思”)** 
        思考有哪些可能漏掉的思路，在同樣範疇中提出可能的其他想法。
      9. **接著重複第2-8步，根據前一個新思路，重新設定新的目標，直到沒有新思路為止，至少重複三次2-8步驟。**
      10. **根據博士論文的撰寫架構，寫出大綱**
      11. **根據大綱與過去搜尋的文獻內容，思考並合成出最後的內容。**

  - trigger: ":gpt-moe"
    replace: >
      請以專家角度 針對此主題提出3個能挑戰現有觀念 啟發深度思考的關鍵問題。

  - trigger: ":tc"
    replace: >
      用繁體中文回答

  - trigger: ":gpt-formissue"
    replace: >
      考慮下面好議題三個的元素，幫助我重塑我的想法形成一個符合這三個元素的好議題，用一段精練的話來表達；我將會隨後給妳我的想法。
      ---
      🎯 本質性問題（影響後續系統設計的核心議題）
      我們應該以哪一層為標準化的核心：Sensor 還是 Edge Device？

      標準化設計若放在 Sensor 會更貼近資料源，但可控性低；若放在 Edge Device，彈性與控制力較高，哪一個更關鍵？
      標準化的維度要做到哪個層級才「剛剛好」？

      太細會限制創新、太粗又無法複用，怎麼找到那個「sweet spot」？
      AWX 是否能擔任長期支援模式的基礎平台？

      是短期部署方便？還是它能真正成為 operation 團隊的核心支援工具？
      💡 深入假設（可能顛覆現況的觀點）
      「資料格式標準化」能否成為未來專案共同語言的核心？

      假如我們不是統一程式框架，而是統一 data schema，是否會讓跨專案協作更容易？
      邊緣設備 Unit Test 有可能變成「高 ROI 投資點」？

      多數人可能忽略測試效益，但在 Edge Device 若能早期發現錯誤，也許是最值得投資的一塊？
      支援團隊是否應參與設計流程而非只是後期支援？

      如果支援團隊參與設計，會不會讓系統更可維護？
      🔍 可解問題（現在就可以著手尋找答案）
      如何衡量這套標準化系統的「回收效益」？

      有沒有 KPI 可用來衡量指引實施後的改善，如維運時間、bug 回報率、學習曲線下降速度？
      團隊中哪些人對於此標準最關鍵？誰來主導？

      若沒有指定 owner，這種標準常常無疾而終，應由誰主導會比較有效？
      如何在專案自由度與共通性之間取得平衡？

      開發者常抗拒過度規範，有沒有設計原則能讓他們在框架中保持彈性？